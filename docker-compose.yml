version: '3.8'

# PUIUX Click - Docker Compose Configuration
# For local development environment

services:
  # ==========================================
  # PostgreSQL Database
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: puiux-postgres
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: puiux_click_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - puiux-network

  # ==========================================
  # Redis Cache
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: puiux-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - puiux-network

  # ==========================================
  # Adminer (Database Management UI)
  # ==========================================
  adminer:
    image: adminer:latest
    container_name: puiux-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - puiux-network

  # ==========================================
  # Redis Commander (Redis Management UI)
  # ==========================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: puiux-redis-commander
    restart: unless-stopped
    ports:
      - '8081:8081'
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - puiux-network

  # ==========================================
  # MinIO (S3-compatible storage for local development)
  # ==========================================
  minio:
    image: minio/minio:latest
    container_name: puiux-minio
    restart: unless-stopped
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - puiux-network

  # ==========================================
  # MailHog (Email testing)
  # ==========================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: puiux-mailhog
    restart: unless-stopped
    ports:
      - '1025:1025' # SMTP
      - '8025:8025' # Web UI
    networks:
      - puiux-network

# ==========================================
# Volumes
# ==========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

# ==========================================
# Networks
# ==========================================
networks:
  puiux-network:
    driver: bridge

# ==========================================
# Usage:
# ==========================================
# Start all services:
#   docker-compose up -d
#
# Stop all services:
#   docker-compose down
#
# View logs:
#   docker-compose logs -f
#
# Restart specific service:
#   docker-compose restart postgres
#
# ==========================================
# Access URLs:
# ==========================================
# PostgreSQL:        localhost:5432
# Redis:             localhost:6379
# Adminer:           http://localhost:8080
# Redis Commander:   http://localhost:8081
# MinIO Console:     http://localhost:9001
# MailHog:           http://localhost:8025
